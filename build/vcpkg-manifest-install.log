Detecting compiler hash for triplet arm64-osx...
The following packages will be built and installed:
  * boost-assert:arm64-osx -> 1.83.0
  * boost-config:arm64-osx -> 1.83.0
  * boost-container-hash:arm64-osx -> 1.83.0
  * boost-core:arm64-osx -> 1.83.0
  * boost-describe:arm64-osx -> 1.83.0
  * boost-move:arm64-osx -> 1.83.0
  * boost-mp11:arm64-osx -> 1.83.0
  * boost-predef:arm64-osx -> 1.83.0
  * boost-preprocessor:arm64-osx -> 1.83.0
  * boost-static-assert:arm64-osx -> 1.83.0
  * boost-throw-exception:arm64-osx -> 1.83.0
  * boost-tuple:arm64-osx -> 1.83.0
  * boost-type-traits:arm64-osx -> 1.83.0
  * boost-uninstall:arm64-osx -> 1.83.0
    boost-unordered:arm64-osx -> 1.83.0
  * boost-vcpkg-helpers:arm64-osx -> 1.83.0
    cxxopts:arm64-osx -> 3.1.1
    fmt:arm64-osx -> 10.1.1
    gtl:arm64-osx -> 1.1.8
    pcg:arm64-osx -> 2021-04-06#2
  * vcpkg-cmake:arm64-osx -> 2023-05-04
  * vcpkg-cmake-config:arm64-osx -> 2022-02-06#1
    xxhash:arm64-osx -> 0.8.2
Additional packages (*) will be modified to complete this operation.
Restored 23 package(s) from /Users/robertovicario/.cache/vcpkg/archives in 213 ms. Use --debug to see more details.
Installing 1/23 boost-uninstall:arm64-osx...
Elapsed time to handle boost-uninstall:arm64-osx: 2.25 ms
Installing 2/23 boost-vcpkg-helpers:arm64-osx...
Elapsed time to handle boost-vcpkg-helpers:arm64-osx: 2.94 ms
Installing 3/23 boost-config:arm64-osx...
Elapsed time to handle boost-config:arm64-osx: 95.1 ms
Installing 4/23 boost-static-assert:arm64-osx...
Elapsed time to handle boost-static-assert:arm64-osx: 3.23 ms
Installing 5/23 boost-type-traits:arm64-osx...
Elapsed time to handle boost-type-traits:arm64-osx: 106 ms
Installing 6/23 boost-assert:arm64-osx...
Elapsed time to handle boost-assert:arm64-osx: 4.84 ms
Installing 7/23 boost-throw-exception:arm64-osx...
Elapsed time to handle boost-throw-exception:arm64-osx: 3.76 ms
Installing 8/23 boost-core:arm64-osx...
Elapsed time to handle boost-core:arm64-osx: 29.8 ms
Installing 9/23 boost-tuple:arm64-osx...
Elapsed time to handle boost-tuple:arm64-osx: 5.1 ms
Installing 10/23 boost-preprocessor:arm64-osx...
Elapsed time to handle boost-preprocessor:arm64-osx: 164 ms
Installing 11/23 boost-predef:arm64-osx...
Elapsed time to handle boost-predef:arm64-osx: 63.1 ms
Installing 12/23 boost-mp11:arm64-osx...
Elapsed time to handle boost-mp11:arm64-osx: 16.1 ms
Installing 13/23 boost-move:arm64-osx...
Elapsed time to handle boost-move:arm64-osx: 21 ms
Installing 14/23 boost-describe:arm64-osx...
Elapsed time to handle boost-describe:arm64-osx: 18.7 ms
Installing 15/23 boost-container-hash:arm64-osx...
Elapsed time to handle boost-container-hash:arm64-osx: 12.3 ms
Installing 16/23 boost-unordered:arm64-osx...
Elapsed time to handle boost-unordered:arm64-osx: 20.6 ms
Installing 17/23 vcpkg-cmake-config:arm64-osx...
Elapsed time to handle vcpkg-cmake-config:arm64-osx: 4.14 ms
Installing 18/23 vcpkg-cmake:arm64-osx...
Elapsed time to handle vcpkg-cmake:arm64-osx: 4.77 ms
Installing 19/23 cxxopts:arm64-osx...
Elapsed time to handle cxxopts:arm64-osx: 4.64 ms
Installing 20/23 fmt:arm64-osx...
Elapsed time to handle fmt:arm64-osx: 13.3 ms
Installing 21/23 gtl:arm64-osx...
Elapsed time to handle gtl:arm64-osx: 11.5 ms
Installing 22/23 pcg:arm64-osx...
Elapsed time to handle pcg:arm64-osx: 4.71 ms
Installing 23/23 xxhash:arm64-osx...
Elapsed time to handle xxhash:arm64-osx: 8.04 ms
Total install time: 621 ms
The package boost is compatible with built-in CMake targets:

    find_package(Boost REQUIRED [COMPONENTS <libs>...])
    target_link_libraries(main PRIVATE Boost::boost Boost::<lib1> Boost::<lib2> ...)

cxxopts provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(cxxopts CONFIG REQUIRED)
  target_link_libraries(main PRIVATE cxxopts::cxxopts)

The package fmt provides CMake targets:

    find_package(fmt CONFIG REQUIRED)
    target_link_libraries(main PRIVATE fmt::fmt)

    # Or use the header-only version
    find_package(fmt CONFIG REQUIRED)
    target_link_libraries(main PRIVATE fmt::fmt-header-only)

gtl is header-only and can be used from CMake via:

    find_path(GTL_INCLUDE_DIRS "gtl/adv_utils.hpp")
    target_include_directories(main PRIVATE ${GTL_INCLUDE_DIRS})

pcg is header-only and can be used from CMake via:

    find_path(PCG_INCLUDE_DIRS "pcg_extras.hpp")
    target_include_directories(main PRIVATE ${PCG_INCLUDE_DIRS})

xxhash provides CMake targets:

  # this is heuristically generated, and may not be correct
  find_package(xxHash CONFIG REQUIRED)
  target_link_libraries(main PRIVATE xxHash::xxhash)

